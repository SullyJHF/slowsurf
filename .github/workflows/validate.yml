name: Validate Extension

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  validate:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Validate manifest.json
      run: |
        echo "üîç Validating manifest.json..."
        
        # Check if manifest.json exists
        if [ ! -f "manifest.json" ]; then
          echo "‚ùå manifest.json not found"
          exit 1
        fi
        
        # Validate JSON syntax
        if ! python3 -m json.tool manifest.json > /dev/null 2>&1; then
          echo "‚ùå Invalid JSON in manifest.json"
          exit 1
        fi
        
        # Check required fields
        REQUIRED_FIELDS=("manifest_version" "name" "version" "description")
        for field in "${REQUIRED_FIELDS[@]}"; do
          if ! grep -q "\"$field\"" manifest.json; then
            echo "‚ùå Missing required field: $field"
            exit 1
          fi
        done
        
        # Check manifest version
        MANIFEST_VERSION=$(grep '"manifest_version"' manifest.json | sed 's/.*"manifest_version": \([0-9]*\).*/\1/')
        if [ "$MANIFEST_VERSION" != "3" ]; then
          echo "‚ùå Extension uses Manifest V$MANIFEST_VERSION, but should use V3"
          exit 1
        fi
        
        echo "‚úÖ manifest.json validation passed"
    
    - name: Validate required files
      run: |
        echo "üîç Validating required files..."
        
        REQUIRED_FILES=("manifest.json" "background.js" "content.js" "delay.html" "delay.js" "options.html" "options.js" "styles.css")
        
        for file in "${REQUIRED_FILES[@]}"; do
          if [ ! -f "$file" ]; then
            echo "‚ùå Missing required file: $file"
            exit 1
          fi
          echo "‚úÖ Found: $file"
        done
        
        echo "‚úÖ All required files present"
    
    - name: Check for security issues
      run: |
        echo "üîí Checking for security issues..."
        
        # Check for potentially dangerous patterns
        DANGEROUS_PATTERNS=("eval(" "innerHTML.*=" "document.write(" "onclick=" "javascript:" "data:text/html")
        
        for pattern in "${DANGEROUS_PATTERNS[@]}"; do
          if grep -r "$pattern" *.js *.html 2>/dev/null; then
            echo "‚ö†Ô∏è  Found potentially dangerous pattern: $pattern"
            echo "Please review for security implications"
          fi
        done
        
        # Check for hardcoded secrets/tokens
        if grep -r -i "token\|secret\|password\|key.*=" *.js *.html 2>/dev/null | grep -v "visitKey\|extensionKey"; then
          echo "‚ö†Ô∏è  Found potential hardcoded secrets"
          echo "Please review for security implications"
        fi
        
        echo "‚úÖ Security check completed"
    
    - name: Validate icon files
      run: |
        echo "üñºÔ∏è  Validating icon files..."
        
        ICON_FILES=("icons/icon16.png" "icons/icon48.png" "icons/icon128.png")
        
        for icon in "${ICON_FILES[@]}"; do
          if [ ! -f "$icon" ]; then
            echo "‚ö†Ô∏è  Missing icon: $icon"
            echo "Extension will work but won't have custom icons"
          else
            echo "‚úÖ Found: $icon"
          fi
        done
    
    - name: Test bundle creation
      run: |
        echo "üì¶ Testing bundle creation..."
        
        # Test the bundle script
        if [ -f "bundle.sh" ]; then
          chmod +x bundle.sh
          ./bundle.sh
          
          # Check if bundle was created
          if [ -f "dist/slowsurf-v1.0.zip" ]; then
            echo "‚úÖ Bundle created successfully"
            
            # Check bundle size
            BUNDLE_SIZE=$(wc -c < "dist/slowsurf-v1.0.zip" | tr -d ' ')
            BUNDLE_SIZE_KB=$((BUNDLE_SIZE / 1024))
            echo "üìè Bundle size: $BUNDLE_SIZE bytes ($BUNDLE_SIZE_KB KB)"
            
            # Check Chrome Web Store size limit
            MAX_SIZE=$((10 * 1024 * 1024))
            if [ $BUNDLE_SIZE -gt $MAX_SIZE ]; then
              echo "‚ùå Bundle size exceeds Chrome Web Store limit (10MB)"
              exit 1
            fi
            
            echo "‚úÖ Bundle size within limits"
          else
            echo "‚ùå Bundle creation failed"
            exit 1
          fi
        else
          echo "‚ö†Ô∏è  bundle.sh not found, skipping bundle test"
        fi
    
    - name: Summary
      run: |
        echo "üéâ Validation completed successfully!"
        echo "Extension is ready for:"
        echo "- Chrome Web Store submission"
        echo "- Manual installation"
        echo "- GitHub release"